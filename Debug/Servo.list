
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000370  08000370  00001370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001cc  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000119  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000103c  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000060f  00000000  00000000  00002772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004185  00000000  00000000  00002d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  00006f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000354 	.word	0x08000354

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000354 	.word	0x08000354

08000170 <servo_angle>:
    }
    SYSTICK_CTRL = 0;
}

void servo_angle(uint8_t angle)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = 50 + ((50*angle)/120);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2232      	movs	r2, #50	@ 0x32
 800017e:	fb02 f303 	mul.w	r3, r2, r3
 8000182:	4a09      	ldr	r2, [pc, #36]	@ (80001a8 <servo_angle+0x38>)
 8000184:	fb82 1203 	smull	r1, r2, r2, r3
 8000188:	441a      	add	r2, r3
 800018a:	1192      	asrs	r2, r2, #6
 800018c:	17db      	asrs	r3, r3, #31
 800018e:	1ad3      	subs	r3, r2, r3
 8000190:	b29b      	uxth	r3, r3
 8000192:	3332      	adds	r3, #50	@ 0x32
 8000194:	81fb      	strh	r3, [r7, #14]

	TIM2_CCR1 = pulse;
 8000196:	4a05      	ldr	r2, [pc, #20]	@ (80001ac <servo_angle+0x3c>)
 8000198:	89fb      	ldrh	r3, [r7, #14]
 800019a:	6013      	str	r3, [r2, #0]
}
 800019c:	bf00      	nop
 800019e:	3714      	adds	r7, #20
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	88888889 	.word	0x88888889
 80001ac:	40000034 	.word	0x40000034

080001b0 <delay>:

void delay(uint32_t time)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	while(time--);
 80001b8:	bf00      	nop
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	1e5a      	subs	r2, r3, #1
 80001be:	607a      	str	r2, [r7, #4]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1fa      	bne.n	80001ba <delay+0xa>
}
 80001c4:	bf00      	nop
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <main>:

// ========================
// Main Program
// ========================
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    //clock_init();

	// 1. Enable clocks
    RCC_APB2ENR |= RCC_IOPAEN;   // GPIOA clock enable
 80001d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000290 <main+0xc0>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000290 <main+0xc0>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR |= RCC_TIM2EN;   // TIM2 clock enable
 80001e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000294 <main+0xc4>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000294 <main+0xc4>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]

    // 2. Configure PA0 = Alternate Function Push-Pull (MODE=11, CNF=10)
    GPIOA_CRL &= ~(0xF << (0 * 4));
 80001ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000298 <main+0xc8>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a29      	ldr	r2, [pc, #164]	@ (8000298 <main+0xc8>)
 80001f2:	f023 030f 	bic.w	r3, r3, #15
 80001f6:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |=  (0xB << (0 * 4));
 80001f8:	4b27      	ldr	r3, [pc, #156]	@ (8000298 <main+0xc8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a26      	ldr	r2, [pc, #152]	@ (8000298 <main+0xc8>)
 80001fe:	f043 030b 	orr.w	r3, r3, #11
 8000202:	6013      	str	r3, [r2, #0]

    // 3. Configure TIM2
    TIM2_PSC = 200-1;        // Prescaler
 8000204:	4b25      	ldr	r3, [pc, #148]	@ (800029c <main+0xcc>)
 8000206:	22c7      	movs	r2, #199	@ 0xc7
 8000208:	601a      	str	r2, [r3, #0]
    TIM2_ARR = 800-1;     // Period
 800020a:	4b25      	ldr	r3, [pc, #148]	@ (80002a0 <main+0xd0>)
 800020c:	f240 321f 	movw	r2, #799	@ 0x31f
 8000210:	601a      	str	r2, [r3, #0]
    TIM2_CCR1 = 75;        // Duty cycle start/ Reference position could be provided
 8000212:	4b24      	ldr	r3, [pc, #144]	@ (80002a4 <main+0xd4>)
 8000214:	224b      	movs	r2, #75	@ 0x4b
 8000216:	601a      	str	r2, [r3, #0]

    TIM2_CCMR1 &= ~(7 << 4);
 8000218:	4b23      	ldr	r3, [pc, #140]	@ (80002a8 <main+0xd8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a22      	ldr	r2, [pc, #136]	@ (80002a8 <main+0xd8>)
 800021e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000222:	6013      	str	r3, [r2, #0]
    TIM2_CCMR1 |= TIM_CCMR1_OC1M_PWM1 | TIM_CCMR1_OC1PE;
 8000224:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <main+0xd8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1f      	ldr	r2, [pc, #124]	@ (80002a8 <main+0xd8>)
 800022a:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800022e:	6013      	str	r3, [r2, #0]
    TIM2_CCER |= TIM_CCER_CC1E;
 8000230:	4b1e      	ldr	r3, [pc, #120]	@ (80002ac <main+0xdc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1d      	ldr	r2, [pc, #116]	@ (80002ac <main+0xdc>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6013      	str	r3, [r2, #0]

    TIM2_CR1 |= TIM_CR1_ARPE;
 800023c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800024a:	6013      	str	r3, [r2, #0]
    TIM2_EGR |= TIM_EGR_UG;
 800024c:	4b18      	ldr	r3, [pc, #96]	@ (80002b0 <main+0xe0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a17      	ldr	r2, [pc, #92]	@ (80002b0 <main+0xe0>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6013      	str	r3, [r2, #0]
    TIM2_CR1 |= TIM_CR1_CEN;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]
            pwm_val += 5;
        } else {
            pwm_val -= 5;
        }*/

    	delay(9000000);
 8000268:	4812      	ldr	r0, [pc, #72]	@ (80002b4 <main+0xe4>)
 800026a:	f7ff ffa1 	bl	80001b0 <delay>

        //TIM2_CCR1 =100;
    	servo_angle(0);
 800026e:	2000      	movs	r0, #0
 8000270:	f7ff ff7e 	bl	8000170 <servo_angle>
        //delay_ms(1);
        delay(9000000);
 8000274:	480f      	ldr	r0, [pc, #60]	@ (80002b4 <main+0xe4>)
 8000276:	f7ff ff9b 	bl	80001b0 <delay>

        //TIM2_CCR1 = 100;
        servo_angle(120);
 800027a:	2078      	movs	r0, #120	@ 0x78
 800027c:	f7ff ff78 	bl	8000170 <servo_angle>
        //delay_ms(1);
        delay(9000000);
 8000280:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <main+0xe4>)
 8000282:	f7ff ff95 	bl	80001b0 <delay>

        //TIM2_CCR1 = 60;
        //delay_ms(1);
        servo_angle(50);
 8000286:	2032      	movs	r0, #50	@ 0x32
 8000288:	f7ff ff72 	bl	8000170 <servo_angle>
    	delay(9000000);
 800028c:	bf00      	nop
 800028e:	e7eb      	b.n	8000268 <main+0x98>
 8000290:	40021018 	.word	0x40021018
 8000294:	4002101c 	.word	0x4002101c
 8000298:	40010800 	.word	0x40010800
 800029c:	40000028 	.word	0x40000028
 80002a0:	4000002c 	.word	0x4000002c
 80002a4:	40000034 	.word	0x40000034
 80002a8:	40000018 	.word	0x40000018
 80002ac:	40000020 	.word	0x40000020
 80002b0:	40000014 	.word	0x40000014
 80002b4:	00895440 	.word	0x00895440

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002ea:	f7ff ff71 	bl	80001d0 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	2600      	movs	r6, #0
 8000310:	4d0c      	ldr	r5, [pc, #48]	@ (8000344 <__libc_init_array+0x38>)
 8000312:	4c0d      	ldr	r4, [pc, #52]	@ (8000348 <__libc_init_array+0x3c>)
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	f000 f81a 	bl	8000354 <_init>
 8000320:	2600      	movs	r6, #0
 8000322:	4d0a      	ldr	r5, [pc, #40]	@ (800034c <__libc_init_array+0x40>)
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <__libc_init_array+0x44>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
