
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000538  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000530  08000530  00001538  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000530  08000530  00001538  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000530  08000538  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00001530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000538  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000538  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000208  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011b  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006b  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000103c  00000000  00000000  0000198b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000067f  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000042d9  00000000  00000000  00003046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000731f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b4  00000000  00000000  00007364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00007518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000518 	.word	0x08000518

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000518 	.word	0x08000518

08000170 <delay>:

	TIM2_CCR1 = pulse;
}

void delay(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	while(time--);
 8000178:	bf00      	nop
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1e5a      	subs	r2, r3, #1
 800017e:	607a      	str	r2, [r7, #4]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d1fa      	bne.n	800017a <delay+0xa>
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <pin_enable>:

void pin_enable(void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	//PA0-> TIMER2
	//PA6-> TIMER3

	// 1. Enable clocks
    RCC_APB2ENR |= (1 << 2);   // GPIOA clock enable
 8000194:	4b25      	ldr	r3, [pc, #148]	@ (800022c <pin_enable+0x9c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a24      	ldr	r2, [pc, #144]	@ (800022c <pin_enable+0x9c>)
 800019a:	f043 0304 	orr.w	r3, r3, #4
 800019e:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR |= (1 << 0);   // TIM2 clock enable for Servo PWM -> 50Hz
 80001a0:	4b23      	ldr	r3, [pc, #140]	@ (8000230 <pin_enable+0xa0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a22      	ldr	r2, [pc, #136]	@ (8000230 <pin_enable+0xa0>)
 80001a6:	f043 0301 	orr.w	r3, r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR |= (1 << 1); //TIM3 clock enable for DC motor PWM -> 100kHz
 80001ac:	4b20      	ldr	r3, [pc, #128]	@ (8000230 <pin_enable+0xa0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000230 <pin_enable+0xa0>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1 << 0); //AFIO clock enable, to define AF
 80001b8:	4b1c      	ldr	r3, [pc, #112]	@ (800022c <pin_enable+0x9c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a1b      	ldr	r2, [pc, #108]	@ (800022c <pin_enable+0x9c>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
    // PA0 = AF Push-Pull (MODE=11, CNF=10), TIM2_CH1
	// PA6 = AF Push-Pull (MODE=11, CNF=10), TIM3_CH1
	// PA2 = GPO Push Pull (MODE=01, CNF=00)
	// PA3 = GPO Push Pull (MODE=01, CNF=00)

    GPIOA_CRL &= ~(0xFFFF << 0); //Clear bits
 80001c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000234 <pin_enable+0xa4>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000234 <pin_enable+0xa4>)
 80001ca:	0c1b      	lsrs	r3, r3, #16
 80001cc:	041b      	lsls	r3, r3, #16
 80001ce:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |=  (0xB << 0); //Set PA0
 80001d0:	4b18      	ldr	r3, [pc, #96]	@ (8000234 <pin_enable+0xa4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a17      	ldr	r2, [pc, #92]	@ (8000234 <pin_enable+0xa4>)
 80001d6:	f043 030b 	orr.w	r3, r3, #11
 80001da:	6013      	str	r3, [r2, #0]
    GPIOA_CRL &= ~(0xF << 24); //Set PA6 bits initially to zero
 80001dc:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <pin_enable+0xa4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a14      	ldr	r2, [pc, #80]	@ (8000234 <pin_enable+0xa4>)
 80001e2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80001e6:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= (0xB << 24); //Set PA6
 80001e8:	4b12      	ldr	r3, [pc, #72]	@ (8000234 <pin_enable+0xa4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	@ (8000234 <pin_enable+0xa4>)
 80001ee:	f043 6330 	orr.w	r3, r3, #184549376	@ 0xb000000
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= (0x1 << 8); //Set PA2
 80001f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <pin_enable+0xa4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <pin_enable+0xa4>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001fe:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= (0x1 << 12); //Set PA3
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <pin_enable+0xa4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	@ (8000234 <pin_enable+0xa4>)
 8000206:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800020a:	6013      	str	r3, [r2, #0]

    //Setting no re-map for alternate function pins PA0 and PA6
    AFIO_MAPR &= ~(0x3 << 8); //Set TIM1 no re-map (00)
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <pin_enable+0xa8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <pin_enable+0xa8>)
 8000212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000216:	6013      	str	r3, [r2, #0]
    AFIO_MAPR &= ~(0x3 << 10); //Set TIM3 not re-map (00)
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <pin_enable+0xa8>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a06      	ldr	r2, [pc, #24]	@ (8000238 <pin_enable+0xa8>)
 800021e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40021018 	.word	0x40021018
 8000230:	4002101c 	.word	0x4002101c
 8000234:	40010800 	.word	0x40010800
 8000238:	40010004 	.word	0x40010004

0800023c <TIM2_init>:

void TIM2_init(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
    //Configure TIM2
    TIM2_PSC = 200-1; //Prescaler
 8000240:	4b1a      	ldr	r3, [pc, #104]	@ (80002ac <TIM2_init+0x70>)
 8000242:	22c7      	movs	r2, #199	@ 0xc7
 8000244:	601a      	str	r2, [r3, #0]
    TIM2_ARR = 800-1; //Period
 8000246:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <TIM2_init+0x74>)
 8000248:	f240 321f 	movw	r2, #799	@ 0x31f
 800024c:	601a      	str	r2, [r3, #0]
    TIM2_CCR1 = 75; // Duty cycle start/ Reference position could be provided
 800024e:	4b19      	ldr	r3, [pc, #100]	@ (80002b4 <TIM2_init+0x78>)
 8000250:	224b      	movs	r2, #75	@ 0x4b
 8000252:	601a      	str	r2, [r3, #0]

    TIM2_CCMR1 &= ~(0x7 << 4);
 8000254:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <TIM2_init+0x7c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a17      	ldr	r2, [pc, #92]	@ (80002b8 <TIM2_init+0x7c>)
 800025a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800025e:	6013      	str	r3, [r2, #0]
    TIM2_CCMR1 |= (0x6 << 4) | (1 << 3); //(6 << 4) | (1 << 3)
 8000260:	4b15      	ldr	r3, [pc, #84]	@ (80002b8 <TIM2_init+0x7c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a14      	ldr	r2, [pc, #80]	@ (80002b8 <TIM2_init+0x7c>)
 8000266:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800026a:	6013      	str	r3, [r2, #0]
    TIM2_CCER |= (1 << 0); //Set output of pwm as output of corresponding pin
 800026c:	4b13      	ldr	r3, [pc, #76]	@ (80002bc <TIM2_init+0x80>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <TIM2_init+0x80>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]

    TIM2_CR1 |= (1 << 7); //Auto reload/ pre-load enable
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000286:	6013      	str	r3, [r2, #0]
    TIM2_EGR |= (1 << 0); //Set UG
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <TIM2_init+0x84>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <TIM2_init+0x84>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
    TIM2_CR1 |= (1 << 0); //Counter enabled
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40000028 	.word	0x40000028
 80002b0:	4000002c 	.word	0x4000002c
 80002b4:	40000034 	.word	0x40000034
 80002b8:	40000018 	.word	0x40000018
 80002bc:	40000020 	.word	0x40000020
 80002c0:	40000014 	.word	0x40000014

080002c4 <TIM3_init>:

void TIM3_init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    //Configure TIM2
    TIM3_PSC = 7; //Pre-scaler
 80002c8:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <TIM3_init+0x6c>)
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
    TIM3_ARR = 1000-1; //Period, TIM3 considered as 8MHz as operated in default SYSCLK of 8MHz
 80002ce:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <TIM3_init+0x70>)
 80002d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002d4:	601a      	str	r2, [r3, #0]
    TIM3_CCR1 = 500; // Duty cycle start (50% duty)/ Reference speed could be provided
 80002d6:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <TIM3_init+0x74>)
 80002d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002dc:	601a      	str	r2, [r3, #0]

    TIM3_CCMR1 &= ~(0x7 << 4);
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <TIM3_init+0x78>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a16      	ldr	r2, [pc, #88]	@ (800033c <TIM3_init+0x78>)
 80002e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002e8:	6013      	str	r3, [r2, #0]
    TIM3_CCMR1 |= (0x6 << 4) | (1 << 3);
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <TIM3_init+0x78>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a13      	ldr	r2, [pc, #76]	@ (800033c <TIM3_init+0x78>)
 80002f0:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80002f4:	6013      	str	r3, [r2, #0]
    TIM3_CCER |= (1 << 0); //Set output of pwm as output of corresponding pin
 80002f6:	4b12      	ldr	r3, [pc, #72]	@ (8000340 <TIM3_init+0x7c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a11      	ldr	r2, [pc, #68]	@ (8000340 <TIM3_init+0x7c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]

    TIM3_CR1 |= (1 << 7); //Auto reload/ pre-load enable
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <TIM3_init+0x80>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a0f      	ldr	r2, [pc, #60]	@ (8000344 <TIM3_init+0x80>)
 8000308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800030c:	6013      	str	r3, [r2, #0]
    TIM3_EGR |= (1 << 0); //Set UG
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <TIM3_init+0x84>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <TIM3_init+0x84>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]
    TIM3_CR1 |= (1 << 0); //Counter enabled
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <TIM3_init+0x80>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a09      	ldr	r2, [pc, #36]	@ (8000344 <TIM3_init+0x80>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40000428 	.word	0x40000428
 8000334:	4000042c 	.word	0x4000042c
 8000338:	40000434 	.word	0x40000434
 800033c:	40000418 	.word	0x40000418
 8000340:	40000420 	.word	0x40000420
 8000344:	40000400 	.word	0x40000400
 8000348:	40000414 	.word	0x40000414

0800034c <forward_dir>:



void forward_dir(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	GPIOA_ODR |= (1 << 2); //PA2 high
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <forward_dir+0x24>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a06      	ldr	r2, [pc, #24]	@ (8000370 <forward_dir+0x24>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA_ODR &= ~(1 << 3); //PA3 low
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <forward_dir+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a03      	ldr	r2, [pc, #12]	@ (8000370 <forward_dir+0x24>)
 8000362:	f023 0308 	bic.w	r3, r3, #8
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	4001080c 	.word	0x4001080c

08000374 <backward_dir>:

void backward_dir(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	GPIOA_ODR &= ~(1 << 2); //PA2 low
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <backward_dir+0x24>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a06      	ldr	r2, [pc, #24]	@ (8000398 <backward_dir+0x24>)
 800037e:	f023 0304 	bic.w	r3, r3, #4
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA_ODR |= (1 << 3); //PA3 high
 8000384:	4b04      	ldr	r3, [pc, #16]	@ (8000398 <backward_dir+0x24>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a03      	ldr	r2, [pc, #12]	@ (8000398 <backward_dir+0x24>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	4001080c 	.word	0x4001080c

0800039c <stop>:

void stop(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	GPIOA_ODR &= ~((1 << 2) | (1 << 3)); //PA2 and PA3 low
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <stop+0x18>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a03      	ldr	r2, [pc, #12]	@ (80003b4 <stop+0x18>)
 80003a6:	f023 030c 	bic.w	r3, r3, #12
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	4001080c 	.word	0x4001080c

080003b8 <speed>:

void speed(int speed) //Input 'speed' should be in a range of 0 - 100. Note: Error handling done
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	int duty;

	if ((speed > 0) | (speed < 90)) //Safe limits are set to the motor, assuming speed 100 is the maximum
	{
		duty = (10 * speed); //This happens with ((1000/100) * speed) where thousand is the total period TIM_ARR and 100 is the range of the speed variable.
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
		TIM3_CCR1 = duty;
 80003cc:	4a03      	ldr	r2, [pc, #12]	@ (80003dc <speed+0x24>)
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6013      	str	r3, [r2, #0]
	}
	else if(speed == 0)
	{
		stop();
	}
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40000434 	.word	0x40000434

080003e0 <set_dir_dcmotor>:

void set_dir_dcmotor(uint8_t dir)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	4603      	mov	r3, r0
 80003e8:	71fb      	strb	r3, [r7, #7]
	//dir = 1-> Forward direction
	//dir = 0-> Backward direction
	//dir = any-> Stop
	if(dir == 1)
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d102      	bne.n	80003f6 <set_dir_dcmotor+0x16>
	{
		forward_dir();
 80003f0:	f7ff ffac 	bl	800034c <forward_dir>
	else if(dir == 0)
	{
		backward_dir();
	}
	else stop();
}
 80003f4:	e007      	b.n	8000406 <set_dir_dcmotor+0x26>
	else if(dir == 0)
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d102      	bne.n	8000402 <set_dir_dcmotor+0x22>
		backward_dir();
 80003fc:	f7ff ffba 	bl	8000374 <backward_dir>
}
 8000400:	e001      	b.n	8000406 <set_dir_dcmotor+0x26>
	else stop();
 8000402:	f7ff ffcb 	bl	800039c <stop>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <main>:

// ========================
// Main Program
// ========================
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    //clock_init();
	pin_enable();
 8000414:	f7ff febc 	bl	8000190 <pin_enable>
	TIM2_init();
 8000418:	f7ff ff10 	bl	800023c <TIM2_init>
	TIM3_init();
 800041c:	f7ff ff52 	bl	80002c4 <TIM3_init>
            pwm_val += 5;
        } else {
            pwm_val -= 5;
        }*/

    	delay(9000000);
 8000420:	4815      	ldr	r0, [pc, #84]	@ (8000478 <main+0x68>)
 8000422:	f7ff fea5 	bl	8000170 <delay>
        //TIM2_CCR1 = 60;
        //delay_ms(1);
        servo_angle(50);
        //delay(9000000);*/

    	set_dir_dcmotor(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ffda 	bl	80003e0 <set_dir_dcmotor>
    	//servo_angle(100);

    	delay(9000000);
 800042c:	4812      	ldr	r0, [pc, #72]	@ (8000478 <main+0x68>)
 800042e:	f7ff fe9f 	bl	8000170 <delay>

    	set_dir_dcmotor(0);
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff ffd4 	bl	80003e0 <set_dir_dcmotor>

    	delay(9000000);
 8000438:	480f      	ldr	r0, [pc, #60]	@ (8000478 <main+0x68>)
 800043a:	f7ff fe99 	bl	8000170 <delay>

    	set_dir_dcmotor(2);
 800043e:	2002      	movs	r0, #2
 8000440:	f7ff ffce 	bl	80003e0 <set_dir_dcmotor>

    	delay(9000000);
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <main+0x68>)
 8000446:	f7ff fe93 	bl	8000170 <delay>

    	speed(40);
 800044a:	2028      	movs	r0, #40	@ 0x28
 800044c:	f7ff ffb4 	bl	80003b8 <speed>
    	set_dir_dcmotor(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff ffc5 	bl	80003e0 <set_dir_dcmotor>
    	delay(9000000);
 8000456:	4808      	ldr	r0, [pc, #32]	@ (8000478 <main+0x68>)
 8000458:	f7ff fe8a 	bl	8000170 <delay>
    	speed(85);
 800045c:	2055      	movs	r0, #85	@ 0x55
 800045e:	f7ff ffab 	bl	80003b8 <speed>
    	delay(9000000);
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <main+0x68>)
 8000464:	f7ff fe84 	bl	8000170 <delay>
    	speed(40);
 8000468:	2028      	movs	r0, #40	@ 0x28
 800046a:	f7ff ffa5 	bl	80003b8 <speed>
    	delay(9000000);
 800046e:	4802      	ldr	r0, [pc, #8]	@ (8000478 <main+0x68>)
 8000470:	f7ff fe7e 	bl	8000170 <delay>
    	delay(9000000);
 8000474:	bf00      	nop
 8000476:	e7d3      	b.n	8000420 <main+0x10>
 8000478:	00895440 	.word	0x00895440

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	@ (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	@ (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	@ (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80004aa:	f000 f811 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80004ae:	f7ff ffaf 	bl	8000410 <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c0:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 80004c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c8:	2000001c 	.word	0x2000001c

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	2600      	movs	r6, #0
 80004d4:	4d0c      	ldr	r5, [pc, #48]	@ (8000508 <__libc_init_array+0x38>)
 80004d6:	4c0d      	ldr	r4, [pc, #52]	@ (800050c <__libc_init_array+0x3c>)
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	f000 f81a 	bl	8000518 <_init>
 80004e4:	2600      	movs	r6, #0
 80004e6:	4d0a      	ldr	r5, [pc, #40]	@ (8000510 <__libc_init_array+0x40>)
 80004e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000514 <__libc_init_array+0x44>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
